package main;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

public class Pool {
	Scanner s = new Scanner(System.in);
	String poolFile = "pool.txt";
	char[][] poolArray;
	
	public Pool() {
		// TODO Auto-generated constructor stub
	}

	void fillPool() {
        List<String> pool = new ArrayList<>();

        try {
            pool = Files.readAllLines(Paths.get(poolFile));
        } catch (IOException e) {
            e.printStackTrace();
        }

        int numRows = pool.size();
        int numCols = pool.get(0).length();

        poolArray = new char[numRows][numCols];

        for (int i = 0; i < numRows; i++) {
            String row = pool.get(i);
            for (int j = 0; j < numCols; j++) {
                poolArray[i][j] = row.charAt(j);
            }
        }

        floodFill(poolArray, 0, 0, ' ', '.');
        
        for (char[] row : pool) {
            for (char pixel : row) {
                System.out.print(pixel);
            }
            System.out.println();
        }

    }

    void floodFill(char[][] pool, int x, int y, char newChar, char originalChar) {
        int rows = pool.length;
        int cols = pool[0].length;

        if (x < 0 || x >= rows || y < 0 || y >= cols || pool[x][y] != originalChar) {
            return;
        }

        pool[x][y] = newChar;

        floodFill(pool, x + 1, y, newChar, originalChar);
        floodFill(pool, x - 1, y, newChar, originalChar);
        floodFill(pool, x, y + 1, newChar, originalChar);
        floodFill(pool, x, y - 1, newChar, originalChar);
    }

	void viewPool() {
		List<String> pool = new ArrayList<>();

		try {
			pool = Files.readAllLines(Paths.get(poolFile));
		
			for(String p : pool) {
				System.out.println(p);
			}

			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		};
		
	}
	
	void emptyPool() {
		List<String> pool = new ArrayList<>();
		
		try {
			pool = Files.readAllLines(Paths.get(poolFile));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		};
		try {
			FileWriter clear = new FileWriter(poolFile);
			clear.write("");
			
			FileWriter w = new FileWriter(poolFile, true);
			BufferedWriter bf = new BufferedWriter(w);
			
			for(String p : pool) {
				for(int i = 0; i < p.length(); i++) {
					if(p.charAt(i) == '.') {
						bf.write(" ");
					} else {
						bf.write(p.charAt(i));
					}
				}
				bf.write("\n");
			}
			
			bf.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	void registerUser() {
		String username, password;
		
		System.out.print("Enter username >");
		username = s.nextLine();
		
		System.out.print("Enter password >");
		password = s.nextLine();
		
		Random r = new Random();
		int num = r.nextInt(1000) % 999 + 100;
		
		String code = "US" + String.valueOf(num);
		
		try {
			FileWriter w = new FileWriter("credentials.txt", true);
			BufferedWriter buff = new BufferedWriter(w);
			buff.write(code + "," + username + "," + password + "\n");
			buff.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		welcome();
	}
	
	
	public void welcome() {
		int choice;
		
		System.out.println("1. Fill Pool");
		System.out.println("2. Empty Pool");
		System.out.println("3. Register User");
		System.out.println("4. Logout");
		System.out.println("5. View Pool");
		System.out.print(">> ");
		choice = s.nextInt(); s.nextLine();
		
		switch(choice) {
		case 1:
			fillPool();
			break;
		case 2:
			emptyPool();
			break;
		case 3:
			registerUser();
			break;
		case 4:
			break;
		case 5: 
			viewPool();
			break;
		default:
			welcome();
			break;
		}
		
	}

}
